function [erp,head,elec,sweep] = epoch(cnt,head,elec,events2epoch,prestim,poststim,scale2uV,verbose), 

% [erp,head,elec,sweep] = epoch(cnt,head,elec,events2epoch,prestim,poststim,scale2uV,verbose), 
%  
% To epoch continous files 
%  
%  cnt,head,elec  input variables from import of continous data 
%
%  events2epoch   vector of unique event numbers to epoch for (e.g. [1,4,5:9,100] )  
% 
%  prestim        milliseconds of prestimulus in epoch 
% 
%  poststim       milliseconds of poststimulus in epoch 
% 
%  verbose        1 or greater = verbose,  0=suppress all output (default 0 if omitted)  
%
%  verbose          0=verbose 1=suppress all output, default 0
%
%    Variables in outfile, and returned from funciton:
%
%      erp    - sweep (trial) level data, with index vectors.
%          erp.data     - trials, waveforms in rows
%          erp.elec     - elec number
%          erp.sweep    - sweep number (i.e. trial number)
%          erp.correct  - from sweep header
%          erp.accept   - from sweep header
%          erp.ttype    - from sweep header
%          erp.rt       - from sweep header
%          erp.response - from sweep header
%
%      elec   - detail about electrodes (e.g. names)
%      sweep  - detail about sweeps
%      head   - detail about about data file (e.g. A/D rate)
%
%  Units - scaling of data is not effected in this function. 
%
% Psychophysiology Toolbox - Data To Matlab Conversion 0.0.6-4, Edward Bernat, University of Minnesota 
% 

% input parameters
  if exist('scale2uV')      ==0, scale2uV      = 1; end
  if exist('verbose')       ==0, verbose       = 0; end

% vars  
  prestimbins  = round(prestim  * cnt.samplerate/1000); 
  poststimbins = round(poststim * cnt.samplerate/1000); 

  eventlocations=zeros(size(cnt.event));   
  for j = 1:length(events2epoch),
    eventlocations = eventlocations +  [cnt.event==events2epoch(j)]; 
  end 
  eventlocations=find(eventlocations~=0); 

% eventlocations=[]; 
% for j = 1:length(events2epoch), 
%   eventlocations = [eventlocations find(cnt.event==events2epoch(j)) ];   
% end 

  tempsizerows = length(eventlocations)*length(cnt.elec); 

  erp.data       = zeros(tempsizerows,abs(prestimbins)+1+poststimbins); 
  erp.elec       = zeros(tempsizerows,1);  
  erp.sweep      = zeros(tempsizerows,1);  
  erp.correct    = zeros(tempsizerows,1);  
  erp.accept     = zeros(tempsizerows,1);  
  erp.ttype      = zeros(tempsizerows,1);  
  erp.rt         = zeros(tempsizerows,1);  
  erp.response   = zeros(tempsizerows,1);  

  if isfield(cnt,'stim'),
    stimnames = fieldnames(cnt.stim);
    for cs = 1:length(stimnames),
      cur_stim = char(stimnames(cs)); 
      if eval(['ischar(cnt.stim.' char(stimnames(cs)) ');']) == 0,
        eval(['erp.stim.' cur_stim ' = zeros(tempsizerows,1);' ]);
      else,
        eval(['erp.stim.' cur_stim ' = blanks(tempsizerows)'';' ]); 
      end
    end
  end

  tempsizerows = length(eventlocations); 

  sweep.accept   = zeros(tempsizerows,1); 
  sweep.ttype    = zeros(tempsizerows,1); 
  sweep.correct  = zeros(tempsizerows,1); 
  sweep.rt       = zeros(tempsizerows,1); 
  sweep.response = zeros(tempsizerows,1); 

% main loop 
  total_elecs = length(cnt.elec);  
  blankones = ones(length(cnt.elec),1); 
  if verbose>0, disp(['Extracting ' num2str(length(eventlocations)) ' events: ' ]); end
  for j = 1:length(eventlocations), 

    if verbose>0, fprintf('\r         event: %d  trigger number: %d ',[j,double(cnt.event(eventlocations(j)))]); end

    startbin     = eventlocations(j) + prestimbins; 
    endbin       = eventlocations(j) + poststimbins;  

    if startbin >= 1 && endbin <= length(cnt.data(1,:)),  

%     cur_range = (((j-1)*total_elecs))+1:(((j-1)*total_elecs)+1)+total_elecs-1; 
      cur_range = ((j-1)*total_elecs)+1:((j-1)*total_elecs)+total_elecs;     % original 

          erp.data(cur_range,:) = cnt.data(:,startbin:endbin);                       
          erp.elec(cur_range,:) = cnt.elec;                                           
         erp.sweep(cur_range,:) = blankones * j;                                     
       erp.correct(cur_range,:) = blankones * 1;                                     
        erp.accept(cur_range,:) = blankones * 1;                                     
         erp.ttype(cur_range,:) = blankones * double(cnt.event(eventlocations(j)));  
            erp.rt(cur_range,:) = blankones * 0;                                     
      erp.response(cur_range,:) = blankones * 0;                                     


      if isfield(cnt,'stim'),
        stimnames = fieldnames(cnt.stim);
        for cs = 1:length(stimnames),
          cur_stim = char(stimnames(cs));
          eval(['erp.stim.' cur_stim '(cur_range,:) = cnt.stim.' cur_stim '(:,eventlocations(:,j))'';' ]);
        end
      end
 
      cur_range = j; 

        sweep.accept(cur_range,:) = 1;                                    
         sweep.ttype(cur_range,:) = double(cnt.event(eventlocations(j))); 
       sweep.correct(cur_range,:) = 1;                                    
            sweep.rt(cur_range,:) = 0;                                   
      sweep.response(cur_range,:) = 0;                                  
 
    else, 
      if verbose>0,  
        fprintf('\n'); 
        disp(['WARNING: starting bin (' num2str(startbin) ') or ending bin (' num2str(endbin) ') for current event at bin (' num2str(eventlocations(j)) ') exceeds available data -- invalid sweep -- skipped ' ]); 
      end  
    end 

  end 
  if verbose>0, fprintf('\n'); end                                                      

% compile erp variable finish up 
  erp.elecnames       = cnt.elecnames;
  erp.tbin            = abs(prestimbins) + 1;
  erp.samplerate      = cnt.samplerate;
  erp.original_format = cnt.original_format;
  erp.scaled2uV       = cnt.scaled2uV;

  cnt.data = [];  

% scale2uV  
  if scale2uV == 1,
    switch cnt.original_format
    case 'neuroscan-cnt'
      if verbose>0, disp(['Scaling to microvolts ... ' ]); end
      erp = ns2mat_scale2uV(erp,head,elec);
    case 'bdf-cnt'
      if verbose>0, disp(['Scaling to microvolts ... ' ]); end
      erp = bdf2mat_scale2uV(erp,head,elec);
    end
  end


