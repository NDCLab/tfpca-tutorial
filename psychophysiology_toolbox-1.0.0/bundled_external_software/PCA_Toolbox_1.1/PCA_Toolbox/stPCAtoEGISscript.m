%cell names of output cellscnames = {...	'HMICL',...	'HMICR',...	'HMINL',...	'HMINR',...	'L',...	'R'};%input cells with which to constitute the output cellscellcoll = {...	[1],...	[2],...	[3],...	[4],...    [1 3]    [2 4]};ename = 'LRPhand';  %name of experimentPCAmode = 'spat';   %mode of second PCA (spatial for temporospatial PCA)timePoints = 512;   %number of timepoints in each epochSampleRate = 250;   %number of samples per secondbase = 200;         %length of pre-stimulus period in msec.numchan = 129;      %number of channelsbins = 1;           %number of units equaling one microvoltcal = 50;           %calibration value.  Not used by the Toolkit.numsubs=7;          %number of subjectsnumcells=4;         %number of input cellsnumfacs=52;         %number of factors (number from 1st step times number from 2nd step)exclChan=[125 126 127 128 17 14 22 16 11 6 129 55 62 68 73 76 82];	%to avoid having peri-ocular or midline channels chosen as peak channels for ANOVAs.params=[];                              %parameters for optional parametric factor mapsparamNames=[];                          %names for parametric factor mapsEGISname = 'LRP(pro\ts\13-4f\nk)';      %name of output waveform fileanovaName = 'LRPfac';                   %stem for ANOVA file namestempANOVAtype = 'SC';                   %Scaling for ANOVA files ('SC' microvolt scaled, 'ST' standardized scalingoutputType = 'EGI';                     %EGI for EGIS file and MAT for Matlab matrix named facWaves%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%You only need to change the variables up to this point%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%     Copyright (C) 1999-2008  Joseph Dien% %     This program is free software: you can redistribute it and/or modify%     it under the terms of the GNU General Public License as published by%     the Free Software Foundation, either version 3 of the License, or%     (at your option) any later version.% %     This program is distributed in the hope that it will be useful,%     but WITHOUT ANY WARRANTY; without even the implied warranty of%     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the%     GNU General Public License for more details.% %     You should have received a copy of the GNU General Public License%     along with this program.  If not, see <http://www.gnu.org/licenses/>.eval(['save ' EGISname '.mat']);if (numsubs * numcells) ~= size(FacScrST,1)	error('The product of numsubs and numcells does not equal the number of observations in the FacScrST factor score matrix');end;if PCAmode == 'temp'	if timePoints ~= size(FacPatST,1)		error('Timepoints variable does not match number of variables in the FacPatST factor pattern matrix');	end;	if numfacs ~= size(FacPatST,2)		error('Numfacs variable does not match number of factors in the FacPatST factor pattern matrix');	end;	if timePoints ~= size(data,2)		error('Columns of data variable does not match specified number of time points');	end;    if numchan ~= size(FacPat,1)		error('Numchan variable does not match number of variables in the FacPat factor pattern matrix');	end;    tempVar = numchan;    tempVar2 = timePoints;elseif PCAmode == 'spat'	if numchan ~= size(FacPatST,1)		error('Numchan variable does not match number of variables in the FacPatST factor pattern matrix');	end;	if numfacs ~= size(FacPatST,2)		error('Numfacs variable does not match number of factors in the FacPatST factor pattern matrix');	end;	if numchan ~= size(data,1)		error('Columns of data variable does not match specified number of channels');	end;    if timePoints ~= size(FacPat,1)		error('Timepoints variable does not match number of variables in the FacPat factor pattern matrix');	end;	tempVar = timePoints;    tempVar2 = numchan;else	error('PCAmode must be set to either temp or spat');end;if length(EGISname) > 27	error('Name of output file (EGISname) too long');end;tempVarSD = ones(1,length(varSDST));	%since varSD is not the same for all the factors, set this to one and then multiply the pattern matrix by the appropriate numbers.numfacs2 = numfacs / size(varSDST,1);	%number of factors retained in second PCA stepnumfacs1 = numfacs / numfacs2;	%number of factors retained in first PCA steptempFacPatST=zeros(size(FacPatST,1), size(FacPatST,2));for i = 1:numfacs1	for k = 1:numfacs2		tempFacPatST(:,(i-1)*numfacs2+k)=diag(varSDST(i,:))*(FacPatST(:,(i-1)*numfacs2+k));	end;end;tempFacScrST=zeros(size(FacScrST,1), size(FacScrST,2));for i = 1:numfacs1	for j = 1:numfacs2		for k = 1:(numsubs*numcells)			tempFacScrST(1+tempVar*(k-1):tempVar*k,(i-1)*numfacs2+j)=diag(varSD)*FacPat(:,i)*FacScrST(k,(i-1)*numfacs2+j);		end;	end;end;if outputType == 'EGI'    [peakLatency, peakSamp, peakChan] = PCAtoEGIS(PCAmode, cnames, cellcoll, ename, base, numchan, timePoints, numsubs, SampleRate, bins, cal, EGISname, tempFacScrST, tempFacPatST, tempVarSD, exclChan, 'EGI', 'GAVE', params, paramNames);elseif outputType == 'MAT'    [peakLatency, peakSamp, peakChan, facWaves] = PCAtoEGIS(PCAmode, cnames, cellcoll, ename, base, numchan, timePoints, numsubs, SampleRate, bins, cal, EGISname, tempFacScrST, tempFacPatST, tempVarSD, exclChan, 'MAT', 'GAVE', params, paramNames);end;for i = 1:numfacs;	PCAtoANOVA(tempFacPatST, tempFacScrST, tempVarSD, PCAmode, -(base), numchan, timePoints, bins, numsubs, peakChan(1,i), [1:numcells], peakSamp(1,i), peakSamp(1,i), (1000/SampleRate), 'mean', i, [anovaName num2str(i) '.txt'], tempANOVAtype);end;clear tempVar tempVar2 tempFacPatST numfacs1 numfacs2 tempVarSD tempFacScrST tempANOVAtype;