function [EEG,params] = CSD_run_eeglab(EEG,params),  

% load_CSD2PTB.m
% To be run as OPTIONS.loaddata script for ISF-implementation in PTB
% S.Burwell: Winter, 2010

% handle options 
if ~exist('params') || isempty(params), params.verbose = 0; end
if ~isstruct(params) && exist(params,'file'), load(params); end 
if ~isfield(params,'montage_type'),       params.montage_type = 'csd'; end 
if ~isfield(params,'montage_file'),       params.montage_file        = 'CSD_base_10-5-System_Mastoids_EGI129.csd'; end
if ~isfield(params,'lambda'),             params.lambda              = 1.0e-5; end
if ~isfield(params,'head'),               params.head                = 10.0;   end
if ~isfield(params,'montage'),     
  if isequal(params.montage_type,'csd');   
    params.montage = CSD_base_ExtractMontage(params.montage_file, ({EEG.chanlocs.labels}'));
  elseif isequal(params.montage_type,'EEGLAB'),
    % need to write this part 
    % convert file with CSD_base_ConvertLocations 
    % create montage variable from converted file   
  end
end

% EEGLAB specific 
if (  ~isfield(params,'G') | ~isfield(params,'H') ) || ( (EEG.nbchan~=size(params.G,1)) | (EEG.nbchan~=size(params.H,1)) )
   disp('Computing variables G and H for Laplacian...')
   [params.G,params.H]   = CSD_base_GetGH(params.montage);
end

% Restructure as continuous
%npts=size(EEG.data,2); EEG.nbchan=size(EEG.data,1); EEG.trials=size(EEG.data,3);
if EEG.trials > 1
%  input_data = reshape(permute(double(EEG.data), [2 3 1]), [EEG.trials*EEG.pnts EEG.nbchan])';
   input_data = double(  EEG.data);
   input_data = permute( input_data, [2 3 1]);
   input_data = reshape(input_data, [EEG.trials*EEG.pnts EEG.nbchan]);
   input_data = input_data'; 
elseif EEG.trials==1
   input_data = EEG.data;
end

% Laplacian transform: CSD toolbox
EEG.data = CSD_base_CSD(input_data, params.G, params.H, params.lambda, params.head);

% Restructure back if needed - needs to be checked  
if EEG.trials > 1
   out_data   = input_data'; 
   out_data   = reshape(out_data, [EEG.pnts EEG.trials EEG.nbchan ]);
   out_data   = ipermute( out_data, [2 3 1]);
elseif EEG.trials==1
   out_data = EEG.data;
end

% Check EEG for errors - need eeglab on path  
if ~isempty(which('eeg_checkset')), 
  EEG = eeg_checkset(EEG); 
end 

